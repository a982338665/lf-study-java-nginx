--------------------------------
高并发时的两个处理策略：

	--1.软件：高并发瓶颈处：
		--1.数据库
		--2.web服务器

	--2.硬件：添加负载均衡器分发大量请求
--------------------------------
一、负载均衡的作用：

	1、转发功能：按照一定的算法【权重、轮询】，将客户端请求转发到不同应用服务器上，
		减轻单个服务器压力，提高系统并发量。

	2、故障移除：通过心跳检测的方式，判断应用服务器当前是否可以正常工作，如果服务器期宕掉，
		自动将请求发送到其他应用服务器。

	3、恢复添加：如检测到发生故障的应用服务器恢复工作，自动将其添加到处理用户请求队伍中
--------------------------------
二、Nginx实现负载均衡
	1、Nginx的负载分发策略:Nginx 的 upstream目前支持的分配算法： 
	   1)、轮询 ——1：1 轮流处理请求（默认）
     		 每个请求按时间顺序逐一分配到不同的应用服务器，如果应用服务器down掉，自动剔除，剩下的继续轮询。 
	   2)、权重 ——you can you up
      		 通过配置权重，指定轮询几率，权重和访问比率成正比，用于应用服务器性能不均的情况。 
	   3)、ip_哈希算法
      		 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个应用服务器，可以解决session共享的问题。
	------------------
	2、配置Nginx的负载均衡与分发策略
      		 通过在upstream参数中添加的应用服务器IP后添加指定参数即可实现:例如：--
     upstream tomcatserver1 {  
        server 192.168.72.49:8080 weight=3;  
        server 192.168.72.49:8081;  
        }   
      
     server {  
            listen       80;  
            server_name  8080.max.com;  
            #charset koi8-r;  
            #access_log  logs/host.access.log  main;  
            location / {  
                proxy_pass   http://tomcatserver1/;#（必须为http://tomcatserver1/，不能为http://tomcatserver1）  
                index  index.html index.htm;  
            }  
         }  
	以上内容是指：
	在访问8080.max.com这个网站时，由于配置了proxy_pass地址，所有请求都会先通过nginx反向代理服务器，在服务器将请求转发给目的主机时，读取upstream为 tomcatsever1的地址，读取分发策略，配置tomcat1权重为3，所以nginx会将大部分请求发送给49服务器上的tomcat1，也就是8080端口；较少部分给tomcat2来实现有条件的负载均衡，当然这个条件就是服务器1、2的硬件指数处理请求能力。  
	-----------------
	3、nginx其他配置
    upstream myServer {    
      
        server 192.168.72.49:9090 down;    #down 表示单前的server暂时不参与负载 
        server 192.168.72.49:8080 weight=2;#Weight 默认为1.weight越大，负载的权重就越大   
        server 192.168.72.49:6060;   
        server 192.168.72.49:7070 backup;    
    }  
	#down 		表示单前的server暂时不参与负载 	
	#Weight 	默认为1.weight越大，负载的权重就越大
	#max_fails 	允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误 
	#fail_timeout	max_fails 次失败后，暂停的时间	
	#Backup  	其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻
-------------------------------- 
三、使用Nginx的高可用:(参考地址：http://blog.csdn.net/daybreak1209/article/details/51556581）
   1.负载均衡服务器分发请求以保证在高并发下各台服务器能相对饱和的处理请求
   2.负载均衡服务器高可用：防止挂掉，导致后续应用服务器工作紊乱
   ---
   高可用方案：添加冗余。添加n台nginx服务器以避免发生上述单点故障 
   ---
   Keepalived+Nginx实现负载均衡高可用：
	1.--基本思路：
		--1.建立备份机，一共两个代理服务器
		--2.主备机上都运行高可用（High Availability）监控程序：通过传送心跳信息来监控对方的运行状况。
			--1.当备份机不能在一定的时间内收到对方的正常心跳时，它就接管主服务器的服务IP并继续提供负载			    均衡服务；
			--2.当备份管理器又从主管理器收到“I am alive”这样的信息时，它就释放服务IP地址，这样的主服			    务器就开始再次提供负载均衡服务
	2.实现：
		--1.提供两个Nginx负载服务器:分别在本机上添加2个虚拟服务器，分别安装Nginx 
		--2.分别在两台服务器上安装keepalived：Keepalived的安装方式不外乎检查配置、编译、安装那几个命令
		--3.配置keepalived：安装好keepalived后 ，进入/usr/local/keepalived/etc/keepalived，修改		    keepalived.conf文件：	































































