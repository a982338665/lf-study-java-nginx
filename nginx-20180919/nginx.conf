
#user  nobody;

#######################################################################
#工作进程个数配置：--不要随意调大，因为只有一个cpu工作，N个work分配，数量大，分配切换耗时，可能降低性能
# ps -ef |grep nginx可看出有一个master，一个worker
#配置规则：cpu数量*核数 + 网卡吞吐量
#cpu：8     *  8核    =64     理论总连接：64*1024
#cpu：16    *  8核    =128    理论总连接：128*1024
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#######################################################################
#网卡过来的请求：一个work最大可保持1024个连接，不能改太大，要综合调优，如操作系统内核，网卡等
#适当调优，最大100000
events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    ################################################
    #默认日志格式，可修改
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #指定简单日志格式：可在每个server上配置不同的日志类型：例如 access_log  logs/access.log  main;
    log_format  simple  '$remote_addr - $remote_user [$time_local] "$request" '
    #access_log  logs/access.log  main;
    #-------------------------
    #参数意思：
    #$http_x_forwarded_for     如果是代理服务器代理真实用户来请求，则真实用户的ip会在此处传入
    ################################################

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #服务器组创建++++++++负载均衡:weight为权重，最大失败次数2次
    upstream imageserver{
        server 192.168.1.230:9200 weight=1 max_fails=10 fail_timeout=30s;
        server 192.168.1.233:9200 weight=1 max_fails=10 fail_timeout=30s;
    }
    #gzip  on;
    ###############################################
    #每一个server代表一个虚拟主机,可增加多个server，如下
    ——————————
    #处理静态页面- server_name 仅是一个标识，实际监听位置还是192.168.1.230:80
    server{
        listen       80;
        server_name  hello.com;
        access_log  logs/hello.log  simple;
        location / {
            #相对路径，当前目录的上级目录开始：即 html
            #绝对路径，/usr/local/nginx/html
            root   html;
            #首页：html/index.html
            index  index.html index.htm;
            #重写url配置:中间的是正则表达式
            #rewrite (.*)$ /index.html;
            }
    }
    server{
        listen       81;
        server_name  hello1.com;
        access_log  logs/hello.log  simple;
        location / {
            #相对路径，当前目录的上级目录开始：即 html
            #绝对路径，/usr/local/nginx/html
            root   html;
            #首页：html/index.html
            index  index.html index.htm;
            #重写url配置:中间的是正则表达式
            #rewrite (.*)$ /index.html;
            #try_files重写:$uri,指当前访问路径，当uri不存在时，访问/hello?$uri
            #try_files $uri /hello?$uri
            }
    }
    #########################################
    #反向代理：
    server{
        listen       82;
        server_name  hello1.com;
        access_log  logs/hello.log  simple;
        location / {
            #相对路径，当前目录的上级目录开始：即 html
            #绝对路径，/usr/local/nginx/html
            root   html;
            #首页：html/index.html
            index  index.html index.htm;
            #重写url配置:中间的是正则表达式
            #rewrite (.*)$ /index.html;
            #try_files重写:$uri,指当前访问路径，当uri不存在时，访问/hello?$uri
            #try_files $uri /hello?$uri
        }
        #########正则########
        location ~ \.(jpeg|jpg|png|gif)$ {
            proxy_pass http://192.168.1.230:9200;
            #防止丢失真实用户ip
            proxy_set_header X-Forwarded-For $remote_addr
        }
    }
    #########################################
    #负载均衡：
    server{
        listen       82;
        server_name  hello1.com;
        access_log  logs/hello.log  simple;
        location / {
            #相对路径，当前目录的上级目录开始：即 html
            #绝对路径，/usr/local/nginx/html
            root   html;
            #首页：html/index.html
            index  index.html index.htm;
            #重写url配置:中间的是正则表达式
            #rewrite (.*)$ /index.html;
            #try_files重写:$uri,指当前访问路径，当uri不存在时，访问/hello?$uri
            #try_files $uri /hello?$uri
        }
        #########正则########
        location ~ \.(jpeg|jpg|png|gif)$ {
            proxy_pass http://imageserver;
            #防止丢失真实用户ip
            proxy_set_header X-Forwarded-For $remote_addr
        }
    }
    #########################################
    ——————————
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            #相对路径，当前目录的上级目录开始：即 html
            #绝对路径，/usr/local/nginx/html
            root   html;
            #首页：html/index.html
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
